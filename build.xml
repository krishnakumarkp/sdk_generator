<?xml version="1.0" encoding="UTF-8"?>
<project name="php-sdk-generator" default="full-build">

    <!-- By default the tools are managed by Composer in ${basedir}/vendor/bin -->
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcs" value="${basedir}/vendor/bin/phpcs"/>
    <property name="phploc" value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd" value="${basedir}/vendor/bin/phpmd"/>
    <property name="swagger-repo" value="swagger-file"/>
    <property name="swagger-version" value="${swaggerTag}"/>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts.">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/sdk-repo"/>
        <delete dir="${basedir}/sdk-php"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="composer" description="Install composer packages including require-dev.">
        <get src="https://getcomposer.org/download/1.10.10/composer.phar" dest="composer.phar"/>
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/composer.phar"/>
            <arg value="install"/>
            <arg value="--prefer-dist"/>
            <arg value="--no-progress"/>
        </exec>
    </target>

    <target name="full-build" depends="prepare,composer,generatesdk,static-analysis,pushsdk"
            description="Generate SDk and Perform static analysis.">
        <echo message="Built"/>
    </target>

    <target name="full-build-test" depends="static-analysis,pushsdk"
            description="Generate SDk and Perform static analysis.">
        <echo message="Built"/>
    </target>

    <target name="generatesdk" unless="generatesdk.done" description="Create php sdk source file.">
        <exec executable="/bin/bash" failonerror="true" taskname="generatesdk">
            <arg value="${basedir}/generator.sh"/>
            <arg value="-s ${swagger-version}" />
        </exec>
        <property name="generatesdk.done" value="true"/>
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of PHP sourcecode files.">
        <apply executable="php" failonerror="true" taskname="lint">
            <arg value="-l"/>
            <fileset dir="${basedir}/sdk-php">
                <include name="**/*.php"/>
                <!-- modified/ -->
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/sdk-php"/>
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpcs" unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/sdk-php"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/sdk-php"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phploc" unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/sdk-php"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci" unless="phploc.done" depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/sdk-php"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>

    <target name="phpmd" unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/sdk-php"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/sdk-php"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="pushsdk" unless="pushsdk.done" depends="generatesdk" description="Push php sdk source files to repo.">
        <exec executable="/bin/bash" failonerror="true" taskname="pushsdk">
            <arg value="${basedir}/git_push.sh"/>
            <arg value="-s ${swagger-version}" />
        </exec>
        <property name="pushsdk.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build.">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="quick-build" depends="prepare,composer,generatesdk,quick-static-analysis,pushsdk"
            description="Perform lint check and run tests without generating code coverage reports.">
        <echo message="Built"/>
    </target>

    <target name="quick-static-analysis" depends="lint,phploc,pdepend,phpmd,phpcs"
            description="Perform static analysis.">
        <echo message="Done"/>
    </target>

    <target name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci"
            description="Perform static analysis.">
        <echo message="Done"/>
    </target>
</project>